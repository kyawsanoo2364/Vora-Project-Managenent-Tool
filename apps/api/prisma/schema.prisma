generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model user {
  id               String            @id @default(uuid())
  username         String            @unique
  firstName        String
  lastName         String
  avatar           String?
  email            String            @unique
  password         String
  uploadedFiles    attachment[]
  workspaceMembers workspaceMember[]
  boardMembers     boardMember[]
  comments         comment[]
  activities       activity[]
  workspaces       workspace[]
  starredBoards    starredBoard[]
  createdInvites   inviteLink[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

model workspace {
  id            String            @id @default(uuid())
  name          String
  boards        board[]
  members       workspaceMember[]
  description   String?
  slug          String            @unique
  logoId        String?           @unique
  logo          media?            @relation(fields: [logoId], references: [id])
  ownerId       String
  owner         user              @relation(fields: [ownerId], references: [id])
  settings      Json?
  isPublic      Boolean           @default(false)
  starredBoards starredBoard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model workspaceMember {
  id          String    @id @default(uuid())
  userId      String
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
}

model boardMember {
  id        String   @id @default(uuid())
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId   String
  board     board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
}

model board {
  id          String         @id @default(uuid())
  name        String
  background  String
  description String?
  workspaceId String
  workspace   workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  list        list[]
  starred     starredBoard[]
  members     boardMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model starredBoard {
  id          String    @id @default(uuid())
  boardId     String
  board       board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  workspaceId String
  userId      String
  user        user      @relation(fields: [userId], references: [id])
  workspace   workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model list {
  id         String @id @default(uuid())
  name       String
  boardId    String
  board      board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  orderIndex Int    @default(0)
  cards      card[]
}

model card {
  id          String       @id @default(uuid())
  title       String
  description String?
  priority    String?      @default("Medium")
  startDate   DateTime?
  dueDate     DateTime?
  checklists  checklist[]
  attachments attachment[]

  listId      String
  list        list       @relation(fields: [listId], references: [id], onDelete: Cascade)
  comments    comment[]
  orderIndex  Int
  activities  activity[]
  isCompleted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId    String
  card      card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model checklist {
  id          String   @id @default(uuid())
  content     String
  isCompleted Boolean  @default(false)
  cardId      String
  card        card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  orderIndex  Int      @default(0)
  createdAt   DateTime @default(now())
}

model attachment {
  id         String @id @default(uuid())
  mediaId    String @unique
  media      media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  userId     String
  uploadedBy user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId     String
  card       card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model activity {
  id        String   @id @default(uuid())
  action    String
  cardId    String
  card      card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model media {
  id         String      @id @default(uuid())
  url        String
  filename   String
  type       String
  workspace  workspace?
  attachment attachment?
  createdAt  DateTime    @default(now())
}

enum InviteRole {
  ADMIN
  MEMBER
}

model inviteLink {
  id          String     @id @default(uuid())
  tokenHash   String
  scope       String
  scopeId     String
  role        String
  createdById String
  maxUses     Int?
  usedCount   Int        @default(0)
  expiresAt   DateTime?
  revoked     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  createdBy user @relation(fields: [createdById], references: [id])


}
