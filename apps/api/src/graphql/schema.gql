# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
  refreshToken: String
}

type User {
  id: String!
  username: String!
  fullName: String!
  email: String!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Media {
  id: String!
  url: String!
  filename: String!
  type: String!
  createdAt: DateTime!
}

type Workspace {
  id: String!
  name: String!
  description: String
  slug: String!
  logo: Media
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StarredBoardEntity {
  id: String!
}

type BoardMember {
  id: String!
  user: User
  userId: String!
  role: String!
}

type Board {
  id: String!
  name: String!
  description: String
  background: String!
  workspace: Workspace!
  members: [BoardMember!]
  createdAt: DateTime!
  starred: [StarredBoardEntity!]!
}

type List {
  id: String!
  name: String!
  orderIndex: Int!
}

type InviteLink {
  inviteLink: String!
}

type FindInviteLink {
  id: String
}

type ConfirmInvite {
  invitedBy: String
  scopeName: String
  scopeType: String!
  alreadyJoined: Boolean!
}

type WorkspaceMember {
  id: String!
  role: String!
  workspaceId: String!
  userId: String!
  user: User!
  createdAt: DateTime!
}

type Card {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Query {
  authWelcome: String!
  refreshToken(refreshToken: String!): Auth!
  user: User!
  getUsersByNameOrEmail(searchTerms: String!): [User!]!
  get_all_my_workspaces: [Workspace!]!
  workspace(id: Int!): Workspace!
  getAllBoards(workspaceId: String!, take: Int! = 10, cursor: String, sort: String, search: String): PaginatedType!
  getBoard(boardId: String!): Board!
  findStarredBoards(workspaceId: String!): [Board!]!
  list(boardId: String!): [List!]!
  boardMembers(boardId: String!): [BoardMember!]!
  getCurrentBoardMember(boardId: String!): BoardMember!
  confirmLink(scopeId: String!, token: String!): ConfirmInvite!
  inviteLink: String!
  getInvite(scopeId: String!): FindInviteLink!
  getMember(workspaceId: String!): WorkspaceMember!
  getAllWorkspaceMember(workspaceId: String!): [WorkspaceMember!]!
  card(id: Int!): Card!
}

type PaginatedType {
  items: [Board!]!
  nextCursor: String
}

type Mutation {
  signIn(signInInput: SignInInput!): Auth!
  signUp(createAuthInput: CreateAuthInput!): String!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createWorkspace(createWorkspaceInput: CreateWorkspaceInput!): Workspace!
  updateWorkspace(updateWorkspaceInput: UpdateWorkspaceInput!): Workspace!
  removeWorkspace(id: Int!): Workspace!
  createBoard(createBoardInput: CreateBoardInput!): Board!
  toggleStarredBoard(toggleStarredBoardInput: ToggleStarredBoardInput!): String!
  updateBoard(updateBoardInput: UpdateBoardInput!): Board!
  createList(createListInput: CreateListInput!): List!
  updateList(updateListInput: UpdateListInput!): String!
  removeList(id: Int!): List!
  createBoardMember(createBoardMemberInput: CreateBoardMemberInput!, boardId: String!): BoardMember!
  updateBoardMember(updateBoardMemberInput: UpdateBoardMemberInput!, boardId: String!): BoardMember!
  removeBoardMember(id: String!): String!
  createInviteLink(createInviteLinkInput: CreateInviteLinkInput!): InviteLink!
  acceptLink(token: String!): String!
  revokeLink(scopeId: String!): String!
  inviteLinkUsingMail(inviteToEmailInput: InviteToEmailInput!): String!
  updateWorkspaceMemberRole(id: String!, role: String!, workspaceId: String!): WorkspaceMember!
  removeWorkspaceMember(id: String!, workspaceId: String!): String!
  createCard(createCardInput: CreateCardInput!, boardId: String!): Card!
  updateCard(updateCardInput: UpdateCardInput!): Card!
  removeCard(id: Int!): Card!
}

input SignInInput {
  email: String!
  password: String!
}

input CreateAuthInput {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input CreateUserInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateUserInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateWorkspaceInput {
  name: String!
  description: String
  logo: String
}

input UpdateWorkspaceInput {
  name: String
  description: String
  logo: String
  id: Int!
}

input CreateBoardInput {
  name: String!
  background: String!
  workspaceId: String!
  description: String
}

input ToggleStarredBoardInput {
  workspaceId: String!
  boardId: String!
}

input UpdateBoardInput {
  name: String
  background: String
  workspaceId: String
  description: String
  id: String!
}

input CreateListInput {
  name: String!
  boardId: String!
}

input UpdateListInput {
  name: String
  boardId: String
  id: String!
  orderIndex: Int!
}

input CreateBoardMemberInput {
  role: ROLE!
  userId: String!
}

enum ROLE {
  ADMIN
  MEMBER
  VIEWER
}

input UpdateBoardMemberInput {
  role: ROLE
  userId: String
  id: String!
}

input CreateInviteLinkInput {
  scope: String!
  scopeId: String!
  role: ROLE! = MEMBER
  maxUses: Int
}

input InviteToEmailInput {
  scope: String!
  scopeId: String!
  role: ROLE! = MEMBER
  maxUses: Int
  email: String!
}

input CreateCardInput {
  title: String!
  listId: String!
}

input UpdateCardInput {
  title: String
  listId: String
  id: Int!
}