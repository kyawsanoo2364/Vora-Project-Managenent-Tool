# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
  refreshToken: String
}

type User {
  id: String!
  username: String!
  fullName: String!
  email: String!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Media {
  id: String!
  url: String!
  filename: String!
  type: String!
  createdAt: DateTime!
}

type Workspace {
  id: String!
  name: String!
  description: String
  slug: String!
  logo: Media
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StarredBoardEntity {
  id: String!
}

type BoardMember {
  id: String!
  user: User
  role: String!
}

type Board {
  id: String!
  name: String!
  description: String
  background: String!
  workspace: Workspace!
  members: [BoardMember!]
  createdAt: DateTime!
  starred: [StarredBoardEntity!]!
}

type List {
  id: String!
  name: String!
  orderIndex: Int!
}

type Query {
  authWelcome: String!
  refreshToken(refreshToken: String!): Auth!
  user: User!
  get_all_my_workspaces: [Workspace!]!
  workspace(id: Int!): Workspace!
  getAllBoards(workspaceId: String!, take: Int! = 10, cursor: String, sort: String, search: String): PaginatedType!
  getBoard(boardId: String!): Board!
  findStarredBoards(workspaceId: String!): [Board!]!
  list(boardId: String!): [List!]!
  boardMembers(boardId: String!): [BoardMember!]!
}

type PaginatedType {
  items: [Board!]!
  nextCursor: String
}

type Mutation {
  signIn(signInInput: SignInInput!): Auth!
  signUp(createAuthInput: CreateAuthInput!): String!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createWorkspace(createWorkspaceInput: CreateWorkspaceInput!): Workspace!
  updateWorkspace(updateWorkspaceInput: UpdateWorkspaceInput!): Workspace!
  removeWorkspace(id: Int!): Workspace!
  createBoard(createBoardInput: CreateBoardInput!): Board!
  toggleStarredBoard(toggleStarredBoardInput: ToggleStarredBoardInput!): String!
  updateBoard(updateBoardInput: UpdateBoardInput!): Board!
  createList(createListInput: CreateListInput!): List!
  updateList(updateListInput: UpdateListInput!): List!
  removeList(id: Int!): List!
  createBoardMember(createBoardMemberInput: CreateBoardMemberInput!): BoardMember!
  updateBoardMember(updateBoardMemberInput: UpdateBoardMemberInput!, boardId: String!): BoardMember!
  removeBoardMember(id: Int!): BoardMember!
}

input SignInInput {
  email: String!
  password: String!
}

input CreateAuthInput {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input CreateUserInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateUserInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateWorkspaceInput {
  name: String!
  description: String
  logo: String
}

input UpdateWorkspaceInput {
  name: String
  description: String
  logo: String
  id: Int!
}

input CreateBoardInput {
  name: String!
  background: String!
  workspaceId: String!
  description: String
}

input ToggleStarredBoardInput {
  workspaceId: String!
  boardId: String!
}

input UpdateBoardInput {
  name: String
  background: String
  workspaceId: String
  description: String
  id: String!
}

input CreateListInput {
  name: String!
  boardId: String!
}

input UpdateListInput {
  name: String
  boardId: String
  id: String!
  orderIndex: Int
}

input CreateBoardMemberInput {
  role: ROLE!
}

enum ROLE {
  ADMIN
  MEMBER
  VIEWER
}

input UpdateBoardMemberInput {
  role: ROLE
  id: String!
}